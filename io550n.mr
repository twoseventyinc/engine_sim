//////////////////////////////////
//     Continental IO-550N      //
//       9L Horizontal-6        //
//      310 HP @ 2700 rpm       //
//   Compression ratio: 8.5:1   //
//   Created by twoseventyinc   //
//////////////////////////////////
// cylinders order:
//    6   5
//    4   3
//    2   1

import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label bore(133.4)
label stroke(108.0)
label compression_ratio(6.5)
label con_rod(226.5) // ~
label intake_valve_lift(12.7) // ?
label exhaust_valve_lift(12.7) // ?
label compression_height(60.0 * units.mm) // ~
label intake_valve_diameter(62.7) // ~
label exhaust_valve_diameter(56.8) // ~
label intake_valves(1.0)
label exhaust_valves(1.0)

label cyl(6.0)
label row(2.0)
label cycle(2.0 * 360.0 * units.deg)
label rot(2.0 * (360.0 / cyl) * units.deg)
label vee(180.0 * units.deg)
label rot90(90.0 * units.deg)
label rot120(120.0 * units.deg)
label rot180(180.0 * units.deg)
label rot360(360.0 * units.deg)

label ci(551.0)
label redline(3250.0)
label intake_cfm((ci * redline * 1.0) / 3200.0)
label exhaust_cfm((redline * 0.001) * ci / 2.0)

label IVO(10.0 * units.deg) //BTDC
label IVC(50.0 * units.deg) //ABDC
label EVO(50.0 * units.deg) //BBDC
label EVC(15.0 * units.deg) //ATDC

//label intake_duration(IVO + IVC + rot120)
//label exhaust_duration(EVO + EVC + rot120)

label intake_duration(275 * units.deg)
label exhaust_duration(275 * units.deg)

label ILC((-IVO + rot120 + IVC) / 2.0 + rot360)
label ELC((rot120 - EVO + EVC + rot360) / 2.0)


// default firing order
// firing order: 1-6-3-2-5-4

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
}

public node eng_distributor_0 {
    input wires;
    input timing_curve;
    input rev_limit: 3200 * units.rpm;
    input limiter_duration: 0.0001;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, ((120.0*0) / 720.0) * cycle)
            .connect_wire(wires.wire2, ((120.0*1) / 720.0) * cycle)
            .connect_wire(wires.wire3, ((120.0*2) / 720.0) * cycle)
            .connect_wire(wires.wire4, ((120.0*3) / 720.0) * cycle)
            .connect_wire(wires.wire5, ((120.0*4) / 720.0) * cycle)
            .connect_wire(wires.wire6, ((120.0*5) / 720.0) * cycle);
}

public node eng_camshaft_builder_0 {
    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;

    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft _intake_cam_0(params, lobe_profile: eng_lobe_profile_int())
    camshaft _exhaust_cam_0(params, lobe_profile: eng_lobe_profile_exh())
    
    camshaft _intake_cam_1(params, lobe_profile: eng_lobe_profile_int())
    camshaft _exhaust_cam_1(params, lobe_profile: eng_lobe_profile_exh())

    _intake_cam_0
        .add_lobe(ILC + 0 * rot)
        .add_lobe(ILC + 8 * rot)
        .add_lobe(ILC + 4 * rot)
        .add_lobe(ILC + 10 * rot)
        .add_lobe(ILC + 2 * rot)
        .add_lobe(ILC + 6 * rot)
    _exhaust_cam_0
        .add_lobe(ELC + 0 * rot)
        .add_lobe(ELC + 8 * rot)
        .add_lobe(ELC + 4 * rot)
        .add_lobe(ELC + 10 * rot)
        .add_lobe(ELC + 2 * rot)
        .add_lobe(ELC + 6 * rot)
        
    _intake_cam_1
        .add_lobe(ILC + 3 * rot)
        .add_lobe(ILC + 11 * rot)
        .add_lobe(ILC + 7 * rot)
        .add_lobe(ILC + 1 * rot)
        .add_lobe(ILC + 5 * rot)
        .add_lobe(ILC + 9 * rot)
    _exhaust_cam_1
        .add_lobe(ELC + 3 * rot)
        .add_lobe(ELC + 11 * rot)
        .add_lobe(ELC + 7 * rot)
        .add_lobe(ELC + 1 * rot)
        .add_lobe(ELC + 5 * rot)
        .add_lobe(ELC + 9 * rot)
}

camshaft_parameters params(
    advance: 0.0 * units.deg,
    base_radius: 2.5 * units.cm
)

public node eng_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: intake_duration,
            gamma: 2.0,
            lift: intake_valve_lift * units.mm,
            steps: 100
        );
}

public node eng_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: exhaust_duration,
            gamma: 2.0,
            lift: exhaust_valve_lift * units.mm,
            steps: 100
        );
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node io550n_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input flip_display: false;
    
    alias output __out: head;
    
    label bore_radius(bore / 2.0)


    function intake_flow(1.270 * units.mm)
    intake_flow
        .add_flow_sample(0.0, 0.0)
        .add_flow_sample(1.270, 50.872)
        .add_flow_sample(2.540, 91.634)
        .add_flow_sample(3.810, 128.581)
        .add_flow_sample(5.080, 163.050)
        .add_flow_sample(6.350, 195.676)
        .add_flow_sample(7.620, 226.833)
        .add_flow_sample(8.890, 256.770)
        .add_flow_sample(10.160, 285.661)
        .add_flow_sample(11.430, 313.638)
        .add_flow_sample(12.700, 340.804)

    function exhaust_flow(1.270 * units.mm)
    exhaust_flow
        .add_flow_sample(0.0, 0.0)
        .add_flow_sample(1.270, 45.432)
        .add_flow_sample(2.540, 81.706)
        .add_flow_sample(3.810, 114.523)
        .add_flow_sample(5.080, 145.095)
        .add_flow_sample(6.350, 173.999)
        .add_flow_sample(7.620, 201.571)
        .add_flow_sample(8.890, 228.038)
        .add_flow_sample(10.160, 253.558)
        .add_flow_sample(11.430, 278.249)
        .add_flow_sample(12.700, 295.158)

    cylinder_head head(
        chamber_volume: (circle_area(bore_radius) * stroke / compression_ratio) / 1000.0 * units.cc,
        intake_runner_volume: 300.000 * units.cc,
        intake_runner_cross_section_area: 12.000 * units.cm2,
        exhaust_runner_volume: 85.000 * units.cc,
        exhaust_runner_cross_section_area: 12.400 * units.cm2,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node eng {
    alias output __out: engine;

    engine engine(
        name: "Continental IO-550N",
        starter_torque: 1200 * units.lb_ft,
        starter_speed: 1500 * units.rpm,
        redline: redline * units.rpm,
        fuel: fuel(
            max_turbulence_effect: 2.0,
            burning_efficiency_randomness: 0.1,
            max_burning_efficiency: 0.90
        ),
        throttle_gamma: 2.0,
        jitter: 0.75,
        noise: 0.75,
        simulation_frequency: 6500
    )

    wires wires()

    crankshaft c0(
        throw: (stroke / 2.0) * units.mm,
        flywheel_mass: 20.2 * units.kg,
        mass: 32.0 * units.kg,
        friction_torque: 10.0 * units.lb_ft,
        moment_of_inertia: 1.5,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 0.0
    )

    rod_journal rj1(angle: 180 * units.deg)  // angles in counter clock wise
    rod_journal rj2(angle: 0 * units.deg)  // 0 deg. is at the right quadrant
    rod_journal rj3(angle: 60 * units.deg)
    rod_journal rj4(angle: 240 * units.deg)
    rod_journal rj5(angle: 300 * units.deg)
    rod_journal rj6(angle: 120 * units.deg)
    
    c0
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)
        .add_rod_journal(rj6)

    piston_parameters piston_params(
        mass: 1000 * units.g,
        blowby: k_28inH2O(0.1),
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: 1000.0 * units.g,
        moment_of_inertia: 0.03,
        center_of_mass: 0.0,
        length: con_rod * units.mm
    )

    cylinder_bank_parameters bank_params(
        bore: bore * units.mm,
        deck_height: (con_rod + stroke / 2.0) * units.mm + compression_height
    )

    label intake_valve_circ(intake_valve_diameter * constants.pi)
    label intake_valve_area(intake_valve_circ * intake_valve_lift / 100.0) // cm2

    label intake_plenum_area(intake_valve_area * cyl * intake_valves) // cm2
    label exhaust_crossection_area(50.321) // cm2

    label exhaust_pipe_length_0(200.0) // cm
    label exhaust_volume_0(exhaust_crossection_area * exhaust_pipe_length_0 / 100.0) // Litres
    
    label exhaust_pipe_length_1(200.0) // cm
    label exhaust_volume_1(exhaust_crossection_area * exhaust_pipe_length_1 / 100.0) // Litres
    
    label spacing_factor(1.1)
    label flange_density(3.0)
    label primary_tube_length(190.688)

    intake intake(
        plenum_volume: 3.5 * units.L,
        plenum_cross_section_area: intake_plenum_area * units.cm2,
        intake_flow_rate: k_carb(intake_cfm),
        idle_flow_rate: k_carb(0.02),
        idle_throttle_plate_position: 0.997,
        runner_flow_rate: k_carb(intake_cfm / (cyl / 2.0)),
        runner_length: 17.780 * units.cm,
        velocity_decay: 0.05
    )
    
    exhaust_system_parameters es_params0(
        outlet_flow_rate: k_carb(exhaust_cfm / 1.5),
        collector_cross_section_area: exhaust_crossection_area * units.cm2,
        length: exhaust_pipe_length_0 * units.cm,
        primary_tube_length: primary_tube_length * units.cm,
        primary_flow_rate: k_carb(exhaust_cfm / (cyl / 2.0)),
        velocity_decay: 1.0,
        volume: exhaust_volume_0 * units.L
    )
    
    exhaust_system_parameters es_params1(
        outlet_flow_rate: k_carb(exhaust_cfm / 1.5),
        collector_cross_section_area: exhaust_crossection_area * units.cm2,
        length: exhaust_pipe_length_1 * units.cm,
        primary_tube_length: primary_tube_length * units.cm,
        primary_flow_rate: k_carb(exhaust_cfm / (cyl / 2.0)),
        velocity_decay: 1.0,
        volume: exhaust_volume_1 * units.L
    )

    exhaust_system exhaust0(es_params0, impulse_response: ir_lib.sharp_0, audio_volume: 10.0)
    exhaust_system exhaust1(es_params1, impulse_response: ir_lib.default_0, audio_volume: 10.0)
    
    label pl0 ((6.0 * bore * spacing_factor / flange_density) * units.mm)
    label pl1 ((5.0 * bore * spacing_factor / flange_density) * units.mm)
    label pl2 ((4.0 * bore * spacing_factor / flange_density) * units.mm)
    label pl3 ((3.0 * bore * spacing_factor / flange_density) * units.mm)
    label pl4 ((2.0 * bore * spacing_factor / flange_density) * units.mm)
    label pl5 ((1.0 * bore * spacing_factor / flange_density) * units.mm)

    cylinder_bank b0(bank_params, angle: vee / 2)
    cylinder_bank b1(bank_params, angle: -vee / 2)

b0
    .add_cylinder(
        piston: piston(piston_params),
        connecting_rod: connecting_rod(cr_params),
        rod_journal: rj1,
        intake: intake,
        exhaust_system: exhaust0,
        primary_length: pl0,
        ignition_wire: wires.wire1
    )
    .add_cylinder(
        piston: piston(piston_params),
        connecting_rod: connecting_rod(cr_params),
        rod_journal: rj3,
        intake: intake,
        exhaust_system: exhaust0,
        primary_length: pl1,
        ignition_wire: wires.wire3
    )
    .add_cylinder(
        piston: piston(piston_params),
        connecting_rod: connecting_rod(cr_params),
        rod_journal: rj5,
        intake: intake,
        exhaust_system: exhaust0,
        primary_length: pl2,
        ignition_wire: wires.wire5
    )

b1
    .add_cylinder(
        piston: piston(piston_params),
        connecting_rod: connecting_rod(cr_params),
        rod_journal: rj2,
        intake: intake,
        exhaust_system: exhaust1,
        primary_length: pl0,
        ignition_wire: wires.wire2
    )
    .add_cylinder(
        piston: piston(piston_params),
        connecting_rod: connecting_rod(cr_params),
        rod_journal: rj4,
        intake: intake,
        exhaust_system: exhaust1,
        primary_length: pl1,
        ignition_wire: wires.wire4
    )
    .add_cylinder(
        piston: piston(piston_params),
        connecting_rod: connecting_rod(cr_params),
        rod_journal: rj6,
        intake: intake,
        exhaust_system: exhaust1,
        primary_length: pl2,
        ignition_wire: wires.wire6
    )
    
    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    eng_camshaft_builder_0 camshaft()
    
    engine.add_ignition_module(
        eng_distributor_0(
            wires: wires,
            timing_curve: timing_curve
        )
    )

    b0.set_cylinder_head (
        io550n_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
            flip_display: true
        )
    )
    b1.set_cylinder_head (
        io550n_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1
        )
    )

    function timing_curve(500 * units.rpm)
    timing_curve
        .add_sample(000 * units.rpm, 7.0 * units.deg)
        .add_sample(500 * units.rpm, 10.0 * units.deg)
        .add_sample(1000 * units.rpm, 15.0 * units.deg)
        .add_sample(1500 * units.rpm, 17.0 * units.deg)
        .add_sample(2000 * units.rpm, 20.0 * units.deg)
        .add_sample(2500 * units.rpm, 22.0 * units.deg)     
        .add_sample(3000 * units.rpm, 25.0 * units.deg)              
}

// Bugatti Type 41
public node veh {
    alias output __out: vehicle;
    vehicle vehicle(
        mass: 3250  * units.kg,
        drag_coefficient: 0.5,
        cross_sectional_area: (1320 * units.mm) * (1050 * units.mm),
        diff_ratio: 3.6,
        tire_radius: (914.4 / 2) * units.mm, // 36 x 6.75
        rolling_resistance: 20
        )
}

// Bugatti Type 41
private node trn {
    alias output __out:
        transmission(
            max_clutch_torque: 1220 * units.Nm,
            max_clutch_flex: 15 * units.deg,
            limit_clutch_flex: true,
            clutch_stiffness: 100 * units.Nm / units.deg,
            clutch_damping: 1.0,
            simulate_flex: true
        )
        .add_gear(7.50)
        .add_gear(1.0)
        .add_gear(0.77);
}

run(
    engine: eng(),
    transmission: trn(),
    vehicle: veh()
)

